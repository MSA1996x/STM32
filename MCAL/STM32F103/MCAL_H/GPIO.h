/*
 * GPIO.h
 *
 *  Created on: Dec 4, 2019
 *      Author: Mohammed Samir
 */

#ifndef GPIO_H_
#define GPIO_H_
#include <MCAL/STM32F103/MCAL_H/MemoryMap.h>
#include "stm32f10x.h"



#define PA0 BITBAND_PERI(GPIOA_BASE + ODR_OFFSET, 0)
#define PA1 BITBAND_PERI(GPIOA_BASE + ODR_OFFSET, 1)
#define PA2 BITBAND_PERI(GPIOA_BASE + ODR_OFFSET, 2)
#define PA3 BITBAND_PERI(GPIOA_BASE + ODR_OFFSET, 3)
#define PA4 BITBAND_PERI(GPIOA_BASE + ODR_OFFSET, 4)
#define PA5 BITBAND_PERI(GPIOA_BASE + ODR_OFFSET, 5)
#define PA6 BITBAND_PERI(GPIOA_BASE + ODR_OFFSET, 6)
#define PA7 BITBAND_PERI(GPIOA_BASE + ODR_OFFSET, 7)
#define PA8 BITBAND_PERI(GPIOA_BASE + ODR_OFFSET, 8)
#define PA9 BITBAND_PERI(GPIOA_BASE + ODR_OFFSET, 9)
#define PA10 BITBAND_PERI(GPIOA_BASE + ODR_OFFSET, 10)
#define PA11 BITBAND_PERI(GPIOA_BASE + ODR_OFFSET, 11)
#define PA12 BITBAND_PERI(GPIOA_BASE + ODR_OFFSET, 12)
#define PA15 BITBAND_PERI(GPIOA_BASE + ODR_OFFSET, 15)

#define PB0 BITBAND_PERI(GPIOB_BASE + ODR_OFFSET, 0)
#define PB1 BITBAND_PERI(GPIOB_BASE + ODR_OFFSET, 1)
#define PB2 BITBAND_PERI(GPIOB_BASE + ODR_OFFSET, 2)
#define PB3 BITBAND_PERI(GPIOB_BASE + ODR_OFFSET, 3)
#define PB4 BITBAND_PERI(GPIOB_BASE + ODR_OFFSET, 4)
#define PB5 BITBAND_PERI(GPIOB_BASE + ODR_OFFSET, 5)
#define PB6 BITBAND_PERI(GPIOB_BASE + ODR_OFFSET, 6)
#define PB7 BITBAND_PERI(GPIOB_BASE + ODR_OFFSET, 7)
#define PB8 BITBAND_PERI(GPIOB_BASE + ODR_OFFSET, 8)
#define PB9 BITBAND_PERI(GPIOB_BASE + ODR_OFFSET, 9)
#define PB10 BITBAND_PERI(GPIOB_BASE + ODR_OFFSET, 10)
#define PB11 BITBAND_PERI(GPIOB_BASE + ODR_OFFSET, 11)
#define PB12 BITBAND_PERI(GPIOB_BASE + ODR_OFFSET, 12)
#define PB13 BITBAND_PERI(GPIOB_BASE + ODR_OFFSET, 13)
#define PB14 BITBAND_PERI(GPIOB_BASE + ODR_OFFSET, 14)
#define PB15 BITBAND_PERI(GPIOB_BASE + ODR_OFFSET, 15)

#define PC13 BITBAND_PERI(GPIOC_BASE + ODR_OFFSET, 13)
#define PC14 BITBAND_PERI(GPIOC_BASE + ODR_OFFSET, 14)
#define PC15 BITBAND_PERI(GPIOC_BASE + ODR_OFFSET, 15)

#define AFIO_CLOCK_ENABLE  	BITBAND_PERI(RCC_BASE + RCC_APB2ENR_OFFSET, 0)
#define GPIOA_CLOCK_ENABLE 	BITBAND_PERI(RCC_BASE + RCC_APB2ENR_OFFSET, 2)
#define GPIOB_CLOCK_ENABLE 	BITBAND_PERI(RCC_BASE + RCC_APB2ENR_OFFSET, 3)
#define GPIOC_CLOCK_ENABLE 	BITBAND_PERI(RCC_BASE + RCC_APB2ENR_OFFSET, 4)



#define PIN_0			0
#define PIN_1			1
#define PIN_2			2
#define PIN_3			3
#define PIN_4			4
#define PIN_5			5
#define PIN_6			6
#define PIN_7			7
#define PIN_8			8
#define PIN_9			9
#define PIN_10			10
#define PIN_11			11
#define PIN_12			12
#define PIN_13			13
#define PIN_14			14
#define PIN_15			15




#define STATE_LOW						0
#define STATE_HIGH						1


/*MODE Bits Status*/
#define MODE_INPUT					0
#define MODE_OUTPUT_10MHZ			1
#define MODE_OUTPUT_2MHZ			2
#define MODE_OUTPUT_50MHZ			3

/*CFN Bits Status*/
#define CNF00			0
#define CNF01			1
#define CNF10			2
#define CNF11			3
//IF MODE > 00
#define CONFIG_OUTPUT_GP_PUSH_PULL		0
#define CONFIG_OUTPUT_GP_OPEN_DRAIN		1
#define CONFIG_OUTPUT_AF_PUSH_PULL		2
#define CONFIG_OUTPUT_AF_OPEN_DRAIN		3
//IF MODE == 00
#define CONFIG_INPUT_ANALOG				4
#define CONFIG_INPUT_FLOATING			5
#define CONFIG_INPUT_PULL_DOWN			6
#define CONFIG_INPUT_PULL_UP			7

#define GPIO_ENABLE_FALSE 	0
#define GPIO_ENABLE_TRUE 	1



void GPIO_Config(GPIO_TypeDef *GPIO, char PIN, char MODE,char GPIO_CONFIG);
void GPIO_Mode(GPIO_TypeDef *GPIO, char PIN, char MODE);
void GPIO_CNF(GPIO_TypeDef *GPIO, char PIN, char CNF);
void GPIO_Enable(GPIO_TypeDef *GPIO,char GPIO_ENABLE);
char digitalRead(GPIO_TypeDef *GPIO, char PIN);
void digitalWrite(GPIO_TypeDef *GPIO,char PIN, char STATE);

#endif /* GPIO_H_ */
